pipeline {
    agent any

    environment {
        // Git settings
        GIT_CREDENTIALS_ID = 'Git'
        GIT_REPO_URL = 'git@github.com:muhannadpv786/WeatherappFrontend.git'
        GIT_BRANCH = 'main'

        // AWS + EKS
        REGION = 'ap-south-1'
        AWS_CREDS_ID = 'aws-secret-key'
 ns = 'weatherapp-ui'
        // ECR & EKS Deployments
        ECR_REPO_URI = '279707218273.dkr.ecr.ap-south-1.amazonaws.com/frontend'
        CLUSTER_NAME = 'muhannad-cluster'
        DEPLOYMENT_NAME = 'frontend'

        // Docker
        DOCKERFILE_DIR = '.'
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_IMAGE_TAG = "${ECR_REPO_URI}:${IMAGE_TAG}"

        // Email
        EMAIL_RECIPIENTS = 'muhannadpv@gmail.com'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: "${GIT_BRANCH}",
                    credentialsId: "${GIT_CREDENTIALS_ID}",
                    url: "${GIT_REPO_URL}"
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${DOCKERFILE_DIR}") {
                    sh "docker build -t ${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Trivy Scan') {
    steps {
        script {
            sh "trivy image --severity HIGH,CRITICAL --output trivy-report.json ${DOCKER_IMAGE_TAG}"
            archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
        }
    }
}


        stage('Configure AWS CLI') {
            steps {
                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}" ]]) {
                    sh """
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region ${REGION}
                    """
                }
            }
        }

        stage('Login to ECR') {
            steps {
                sh """
                    aws ecr get-login-password --region ${REGION} | \
                    docker login --username AWS --password-stdin ${ECR_REPO_URI}
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${DOCKER_IMAGE_TAG}"
            }
        }

        stage('Deploy to EKS') {
            steps {
                withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS_ID}" ]]) {
                    sh """
                        aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${REGION}
                        kubectl set image deployment/${DEPLOYMENT_NAME} ${DEPLOYMENT_NAME}=${DOCKER_IMAGE_TAG} -n ${ns}
                    """
                }
            }
        }
    }

    
post {
    success {
        echo "✅ Deployment successful!"
        emailext (
            subject: "✅ Build #${BUILD_NUMBER} SUCCESS: ${JOB_NAME}",
            body: """<p>✅ <b>Build Success</b>: #${BUILD_NUMBER}</p>
                     <p>Project: <b>${JOB_NAME}</b></p>
                     <p><b>Download Trivy Report:</b> 
                     <a href="${BUILD_URL}artifact/trivy-report.json">trivy-report.json</a></p>
                     <p>Check full build logs: <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
            mimeType: 'text/html',
            to: "${EMAIL_RECIPIENTS}"
        )
    }

    failure {
        echo "❌ Deployment failed!"
        emailext (
            subject: "❌ Build #${BUILD_NUMBER} FAILED: ${JOB_NAME}",
            body: """<p>❌ <b>Build Failed</b>: #${BUILD_NUMBER}</p>
                     <p>Project: <b>${JOB_NAME}</b></p>
                     <p><b>Download Trivy Report:</b> 
                     <a href="${BUILD_URL}artifact/trivy-report.json">trivy-report.json</a></p>
                     <p>Check full build logs: <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
            mimeType: 'text/html',
            to: "${EMAIL_RECIPIENTS}"
        )
    }


        aborted {
            echo "⚠️ Build was cancelled!"
            emailext (
                subject: "⚠️ Build #${BUILD_NUMBER} ABORTED: ${JOB_NAME}",
                body: """<p>⚠️ <b>Build Aborted</b>: #${BUILD_NUMBER}</p>
                         <p>Project: <b>${JOB_NAME}</b></p>
                         <p>Someone likely canceled the build. See: <a href="${BUILD_URL}">${BUILD_URL}</a></p>""",
                to: "${EMAIL_RECIPIENTS}"
            )
        }

        
        
    }
}
